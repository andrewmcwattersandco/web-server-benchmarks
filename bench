#!/bin/sh
set -e

cores=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 1)
if [ "$cores" -gt 1 ]; then
    threads=$((cores - 1))
else
    threads=1
fi

hush() {
    lsof -t -i:8080 | xargs kill -9 >/dev/null 2>&1 || true
}

listen() {
    while ! curl --fail --show-error --silent "$1" >/dev/null 2>&1
    do
        sleep 1
    done
}

bench() {
    sleep 1   # laisser le temps de forker si ça daemonize
    pid=$(pgrep -n "$1")   # le plus récent PID
    listen http://127.0.0.1:8080
    wrk -t"$threads" -c400 -d30s http://127.0.0.1:8080
    printf '\n'
    kill "$pid" >/dev/null 2>&1 || true
    wait "$pid" >/dev/null 2>&1 || true
}

# ASP.NET Core
echo "ASP.NET Core"
cd "asp.net core/WebApplication1"
dotnet build --configuration Release >/dev/null 2>&1
hush
ASPNETCORE_HTTP_PORTS=8080 dotnet ./bin/Release/net*/WebApplication1.dll >/dev/null 2>&1 &
bench dotnet
cd ../..

# Express
echo "Express"
cd express
npm install >/dev/null 2>&1
hush
node app.js >/dev/null 2>&1 &
bench node
cd ..

# Spring Boot
echo "Spring Boot"
cd "spring boot/demo"
hush
./gradlew bootRun >/dev/null 2>&1 &
bench java
cd ../..

# Fastify
echo "Fastify"
cd fastify
npm install >/dev/null 2>&1
hush
node server.js >/dev/null 2>&1 &
bench node
cd ..

# Gin
echo "Gin"
cd gin
go build -o main >/dev/null 2>&1
hush
./main >/dev/null 2>&1 &
bench main
cd ..

# Actix Web
echo "Actix Web"
cd "actix web/hello-world"
cargo build --release >/dev/null 2>&1
hush
./target/release/hello-world >/dev/null 2>&1 &
bench hello-world
cd ../..
